# Configuration file for ReSpeaker 6 Mic Array
# Circular shape, R = 0.0463m

version = "2.1";

# Raw

raw: 
{

    fS = 16000;		# Sampling rate for our mics = 16000 Hz
    hopSize = 128;
    nBits = 32;
    nChannels = 6;	# Only recording to 6 channels!
			# Note - when doing ODAS live, we have to specify 8 channels - as final 2 are empty (2 output channels)

    # Input with raw signal from microphones
    #interface: {
        #type = "soundcard";
        #card = 1;
        #device = 0;
    #}

    # Input from pre-recorded raw file (must convert wav to raw first!)
    interface: {
	type = "file";
	path = "Pigeon_and_Other.raw";
    };
    

}

# Mapping

mapping:
{

    #map: (1, 2, 3, 4, 7, 8);		# ODAS provided the wrong config file!
    map: (1, 2, 3, 4, 5, 6);		# We actually write to 1st 6 channels (channels 7 & 8 are empty for output)

}

# General

general:
{
    
    epsilon = 1E-20;

    size: 
    {
        hopSize = 128;
        frameSize = 256;
    };
    
    samplerate:
    {
        mu = 16000;
        sigma2 = 0.01;
    };

    speedofsound:
    {
        mu = 343.0;
        sigma2 = 25.0;
    };

    mics = (
        
        # Microphone 1
        { 
            mu = ( -0.0232, +0.0401, +0.0000 ); 
            sigma2 = ( +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000 );
            direction = ( +0.000, +0.000, +1.000 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 2
        { 
            mu = ( -0.0463, +0.0000, +0.0000 ); 
            sigma2 = ( +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000 );
            direction = ( +0.000, +0.000, +1.000 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 3
        { 
            mu = ( -0.0232, -0.0401, +0.0000 ); 
            sigma2 = ( +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000 );
            direction = ( +0.000, +0.000, +1.000 );
            angle = ( 80.0, 90.0 );
        },

        # Microphone 4
        { 
            mu = ( +0.0232, -0.0401, +0.0000 ); 
            sigma2 = ( +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000 );
            direction = ( +0.000, +0.000, +1.000 );
            angle = ( 80.0, 90.0 );        
        },

        # Microphone 5
        { 
            mu = ( +0.0463, +0.0000, +0.0000 ); 
            sigma2 = ( +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000 );
            direction = ( +0.000, +0.000, +1.000 );
            angle = ( 80.0, 90.0 );        
        },

        # Microphone 6
        { 
            mu = ( +0.0232, +0.0401, +0.0000 ); 
            sigma2 = ( +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000, +0.000 );
            direction = ( +0.000, +0.000, +1.000 );
            angle = ( 80.0, 90.0 );
        }
        
    );

    # Spatial filters to include only a range of direction if required
    # (may be useful to remove false detections from the floor, or
    # limit the space search to a restricted region)
    spatialfilters = (

        {

            direction = ( +0.000, +0.000, +1.000 );
            angle = (80.0, 90.0);

        }

    );  

    nThetas = 181;
    gainMin = 0.25;

};

# Stationnary noise estimation

sne:
{
    
    b = 3;
    alphaS = 0.1;
    L = 150;
    delta = 3.0;
    alphaD = 0.1;

}

# Sound Source Localization

ssl:
{
    # MAX OF 4!
    nPots = 4;		# Max number of separate sources to localise
			# This also equals num of channels in exported sep & pf files
    nMatches = 10;
    probMin = 0.5;
    nRefinedLevels = 1;
    interpRate = 4;

    # Number of scans: level is the resolution of the sphere
    # and delta is the size of the maximum sliding window
    # (delta = -1 means the size is automatically computed)
    scans = (
        { level = 2; delta = -1; },
        { level = 4; delta = -1; }
    );

    # Output to export potential sources
    potential: {

        format = "json";

	# To output via socket...
        interface: {
            type = "socket"; ip = "169.254.186.148"; port = 9001;
        };

	# To write to terminal...
	#interface: {
            #type = "terminal";
        #};

	#interface: {
	    #type = "file";
	    #path = "09-40-25_localised.json";        
	#};  


    };

};

# Sound Source Tracking

sst:
{  

    # Mode is either "kalman" or "particle"

    mode = "kalman";		# kalman gives smoother results

    # Add is either "static" or "dynamic"

    #add = "dynamic";		# dynamic tracks sources as they appear, static you can specify where to track
    add = "static";
    
    # Parameters used by both the Kalman and particle filter

    active = (
        { weight = 1.0; mu = 0.3; sigma2 = 0.0025 }	# mu = stops tracking after energy falls below this point, def = 0.3
    );

    inactive = (
        { weight = 1.0; mu = 0.15; sigma2 = 0.0025 }	# mu = starts tracking after energy goes above this point, def = 0.15
    );

    sigmaR2_prob = 0.0025;
    sigmaR2_active = 0.0225;
    sigmaR2_target = 0.0025;
    Pfalse = 0.1;
    Pnew = 0.1;
    Ptrack = 0.8;

    theta_new = 0.9;
    N_prob = 5;
    theta_prob = 0.8;
    N_inactive = ( 150, 200, 250, 250 );
    theta_inactive = 0.9;

    # Parameters used by the Kalman filter only

    kalman: {

        sigmaQ = 0.001;
        
    };
   
    # Parameters used by the particle filter only

    particle: {

        nParticles = 1000;
        st_alpha = 2.0;
        st_beta = 0.04;
        st_ratio = 0.5;
        ve_alpha = 0.05;
        ve_beta = 0.2;
        ve_ratio = 0.3;
        ac_alpha = 0.5;
        ac_beta = 0.2;
        ac_ratio = 0.2;
        Nmin = 0.7;

    };

    #target: ();
    
    # Specify exact positions to track (for sep & pf)...
    # Note - In dynamic, these positions take the first channels - any remaining channels are allocated to dynamic sources
    # x^2 + y^2 + z^2 should = 1 (to be on hemisphere)
    
    # Separated into 4 quadrants, between x & y axes (45 degrees elevation)...
    #target = (
	#{ tag = "dir1"; x = 0.5; y = 0.5; z = 0.7071},
	#{ tag = "dir2"; x = 0.5; y = -0.5; z = 0.7071},
	#{ tag = "dir3"; x = -0.5; y = 0.5; z = 0.7071},
	#{ tag = "dir4"; x = -0.5; y = -0.5; z = 0.7071}
    #);
    
    # Separated into 4 quadrants, aligned with x & y axes (30 degrees elevation)
    target = (
	{ tag = "dir1"; x = 0.866; y = 0.0; z = 0.5},
	{ tag = "dir2"; x = -0.866; y = 0.0; z = 0.5},
	{ tag = "dir3"; x = 0.0; y = 0.866; z = 0.5},
	{ tag = "dir4"; x = 0.0; y = -0.866; z = 0.5},
    );

    # Output to export tracked sources
    tracked: {


        format = "json";

        interface: {
            type = "socket"; ip = "169.254.186.148"; port = 9000;
        };

	#interface: {
            #type = "terminal";
        #};

	#interface: {
	    #type = "file";
	    #path = "09-40-25_tracked.json";        
	#};     


    };

}

sss:
{
    
    # Mode is either "dds", "dgss" or "dmvdr"

    mode_sep = "dds";		# Delay & Sum Beamforming
    #mode_sep = "dgss"		# Geometric Source Separation Beamforming
    mode_pf = "ms";
    #mode_pf = "ss";

    gain_sep = 5.0;
    gain_pf = 10.0;

    dds: {

    };

    dgss: {

        mu = 0.01;
        lambda = 0.5;

    };

    dmvdr: {

    };

    ms: {

        alphaPmin = 0.07;
        eta = 0.5;
        alphaZ = 0.8;        
        thetaWin = 0.3;
        alphaWin = 0.3;
        maxAbsenceProb = 0.9;
        Gmin = 0.01;
        winSizeLocal = 3;
        winSizeGlobal = 23;
        winSizeFrame = 256;

    };

    ss: {

        Gmin = 0.01;
        Gmid = 0.9;
        Gslope = 10.0;

    }

    separated: {

	fS = 16000;        
	hopSize = 128;
        nBits = 16;      	# Separate using 16 bits (32 bits causes issues with data processing)  

        #interface: {
            #type = "socket";
            #ip = "169.254.186.148";
	    #port = 10000;
        #}
	
	# Save output to local file...
	interface: {
	    type = "file";
	    path = "Pigeon_sep.raw";        
	};
	
    };

    postfiltered: {

	fS = 16000;        
	hopSize = 128;
        nBits = 16;        

        #interface: {
            #type = "socket";
            #ip = "169.254.186.148";
	    #port = 10010;
        #}

	interface: {
	    type = "file";
	    path = "Pigeon_pf.raw";        
	}; 

    };

}

classify:
{
    
    frameSize = 1024;
    winSize = 3;
    tauMin = 32;
    tauMax = 200;
    deltaTauMax = 7;
    alpha = 0.3;
    gamma = 0.05;
    phiMin = 0.15;
    r0 = 0.2;    

    category: {

        format = "undefined";

        interface: {
            type = "blackhole";
        }

    }

}
